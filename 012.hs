-- The sequence of triangle numbers is generated by adding the natural numbers. 
-- So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
-- The first ten terms would be:

-- 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

-- Let us list the factors of the first seven triangle numbers:

--  1: 1
--  3: 1,3
--  6: 1,2,3,6
-- 10: 1,2,5,10
-- 15: 1,3,5,15
-- 21: 1,3,7,21
-- 28: 1,2,4,7,14,28
-- We can see that 28 is the first triangle number to have over five divisors.

-- What is the value of the first triangle number to have over five hundred divisors?

import Data.List

divideInt :: (Integral b, Integral a, Integral a1) => a -> a1 -> b
divideInt n z = round (fromIntegral(n) / fromIntegral(z))

sqrtInt :: (Integral b, Integral a) => a -> b
sqrtInt n = round $ sqrt $ fromIntegral n

factors :: Integral a1 => a1 -> [a1]
factors n = nub $ concat [[z, divideInt n z] | z <- [1..(sqrtInt n)], (n `mod` z) == 0]

triangle :: (Integral a) => a -> a
triangle n = foldl1 (+) [1..n]

triangles = map triangle [1..]

divisors n = length $ factors n

divisorlist = map divisors triangles

under n = takeWhile (< n+1) divisorlist

answerFor n = triangle $ 1 + (length $ under n)

answer = answerFor 500